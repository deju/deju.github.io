{"version":3,"sources":["logo.svg","components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Counter","react_default","a","createElement","className","id","Component","App","document","getElementById","style","display","particles_default","params","particles","number","value","size","interactivity","events","onhover","enable","mode","this","renderParticle","src","logo","alt","Counter_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mQCKnBC,0LAGb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEXH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUD,UAAU,mBAExBH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,OAAOD,UAAU,gBACrBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCAAd,MACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAhB,WAGJH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QAAQD,UAAU,6BACtBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,4CAAd,MACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,YAGJH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUD,UAAU,6BACxBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8CAAd,MACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,aAGJH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUD,UAAU,6BACxBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8CAAd,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,uBAzBaE,8BCmDtBC,qMA/CPC,SAASC,eAAe,aAAaC,MAAMC,QAAU,gDAIrD,OACIV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACIE,UAAU,eACVS,OAAQ,CACJC,UAAa,CACTC,OAAU,CACNC,MAAS,IAEbC,KAAQ,CACJD,MAAS,IAGjBE,cAAiB,CACbC,OAAU,CACNC,QAAW,CACPC,QAAU,EACVC,KAAQ,iDAUhC,OACIrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACVmB,KAAKC,kBAEVvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,OAAKsB,IAAKC,IAAMC,IAAI,UAC9C1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,mBACAH,EAAAC,EAAAC,cAACyB,EAAD,gBA1CNtB,cCMEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAAS5B,SAASC,eAAe,SDuH3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94a4cecc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport React, { Component } from 'react';\n\nimport './Counter.css';\n\nexport default class Counter extends Component {\n\n    render () {\n        return (\n            <div className=\"content-counter\">\n\n                <div id=\"counter\" className=\"counter-wrapper\"> \n\n                    <div id=\"days\" className=\"time-content\">\n                        <h2 className=\"days-number content-number days\">12</h2>\n                        <span className=\"days-text time-text\"> Days </span>\n                    </div>\n\n                    <div id=\"hours\" className=\"time-content time-counter\">\n                        <h2 className=\"time-content-number content-number hours\">12</h2>\n                        <span className=\"time-text\"> Hours </span>\n                    </div>\n\n                    <div id=\"minutes\" className=\"time-content time-counter\">\n                        <h2 className=\"time-content-number content-number minutes\">10</h2>\n                        <span className=\"time-text\">Minuts  </span>\n                    </div>\n\n                    <div id=\"seconds\" className=\"time-content time-counter\">\n                        <h2 className=\"time-content-number content-number seconds\">1</h2>\n                        <span className=\"time-text\">Seconds  </span>\n                    </div>\n\n                </div> \n\n            </div>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Counter from './components/Counter';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n    componentDidMount () {\n        document.getElementById('preloader').style.display = 'none';\n    }\n\n    renderParticle () {\n        return (\n            <Particles\n                className=\"app-particle\"\n                params={{\n                    \"particles\": {\n                        \"number\": {\n                            \"value\": 50\n                        },\n                        \"size\": {\n                            \"value\": 3\n                        }\n                    },\n                    \"interactivity\": {\n                        \"events\": {\n                            \"onhover\": {\n                                \"enable\": true,\n                                \"mode\": \"repulse\"\n                            }\n                        }\n                    }\n                }}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <div className=\"app-root\">\n                    <div className=\"app-particle__container\">\n                        {this.renderParticle()}\n                    </div>\n                    <div className=\"app-container\">\n                        <div className=\"app-logo\"><img src={logo} alt=\"logo\" /></div>\n                        <div className=\"centered\">Comming soon...</div>\n                        <Counter />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}